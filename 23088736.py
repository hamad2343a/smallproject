# -*- coding: utf-8 -*-
"""23088736.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10vMv5-w8TBQF7PVBbDyM6pKwje2e99uz

read the dataset
"""

# Importing necessary libraries
import pandas as pd

# Reading the dataset
file_path = "airline3.csv"  # Ensure this matches the actual path of your file
data = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
print(data.head())

# Displaying basic information about the dataset
print(data.info())

"""Converting the Date column to a proper datetime"""

# Convert 'Date' column to datetime format
data['Date'] = pd.to_datetime(data['Date'])

# Verify the range of dates
print(f"Data starts from: {data['Date'].min()}")
print(f"Data ends at: {data['Date'].max()}")

# Add a new column for the month to simplify grouping later
data['Month'] = data['Date'].dt.month

# Display the first few rows again to confirm the changes
print(data.head())

"""Solution for Problem 1"""

import numpy as np
import matplotlib.pyplot as plt

# Fourier Transform on daily passenger numbers
passenger_numbers = data['Number'].values
fourier_coefficients = np.fft.fft(passenger_numbers)
frequencies = np.fft.fftfreq(len(passenger_numbers), d=1)  # Assumes daily sampling

# Create Fourier series approximation (first 8 terms)
approximation = np.zeros_like(passenger_numbers)
for k in range(8):
    approximation += np.real(fourier_coefficients[k] * np.exp(2j * np.pi * frequencies[k] * np.arange(len(passenger_numbers))))

# Calculate average daily passengers per month
monthly_avg = data.groupby('Month')['Number'].mean()

# Plotting
plt.figure(figsize=(12, 6))

# Bar chart for monthly averages
plt.bar(monthly_avg.index, monthly_avg.values, label='Average Daily Passengers (Monthly)', alpha=0.8, color='yellow', width=0.8)

# Rescale Fourier approximation to fit the scale of the bar chart
x_values = np.linspace(1, 12, len(passenger_numbers))  # Scale Fourier approximation to match 12 months
scaled_approximation = approximation / max(approximation) * max(monthly_avg.values)  # Normalize Fourier curve to bar height
plt.plot(x_values, scaled_approximation, label='Fourier Approximation (8 terms)', color='red', alpha=0.8)

# Titles and labels
plt.title('Monthly Average Daily Passengers and Fourier Approximation', fontsize=14, pad=20)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Number of Passengers', fontsize=12)
plt.xticks(ticks=np.arange(1, 13), labels=[
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
], fontsize=10)

# Add Student ID above the legend inside a rectangle
plt.text(
    0.99, max(monthly_avg.values) * 0.85,  # Adjust x and y position relative to the plot
    'Student ID: 23088736',
    fontsize=12, color='blue', weight='bold',
    bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')
)

# Adding legend and grid
plt.legend(fontsize=10, loc='upper left')
plt.grid(alpha=0.4)

# Save the plot
plt.savefig('figure1_with_id_above_legend.png', dpi=300)  # High resolution for clarity
plt.show()

"""Computing the Power Spectrum"""

# Compute power spectrum (squared magnitudes of Fourier coefficients)
power_spectrum = np.abs(fourier_coefficients[:len(fourier_coefficients) // 2])**2
frequencies_positive = frequencies[:len(frequencies) // 2]  # Positive frequencies only

"""Calculating Values X and Y

Average price for summer months (June, July, August)
"""

summer_months = [6, 7, 8]
X = data[data['Month'].isin(summer_months)]['Price'].mean()

"""Average price for autumn months (September, October, November)"""

autumn_months = [9, 10, 11]
Y = data[data['Month'].isin(autumn_months)]['Price'].mean()

""" Plot the Power Spectrum"""

import numpy as np
import matplotlib.pyplot as plt

# Compute power spectrum (squared magnitudes of Fourier coefficients)
power_spectrum = np.abs(fourier_coefficients[:len(fourier_coefficients) // 2])**2
frequencies_positive = frequencies[:len(frequencies) // 2]  # Positive frequencies only

# Filter frequencies for one week to one year
mask = (frequencies_positive >= 1 / 365) & (frequencies_positive <= 1 / 7)
filtered_frequencies = frequencies_positive[mask]
filtered_power_spectrum = power_spectrum[mask]

# Calculate values X and Y
summer_months = [6, 7, 8]
X = data[data['Month'].isin(summer_months)]['Price'].mean()

autumn_months = [9, 10, 11]
Y = data[data['Month'].isin(autumn_months)]['Price'].mean()

# Plotting
plt.figure(figsize=(12, 6))

# Power spectrum line plot
plt.plot(filtered_frequencies, filtered_power_spectrum, label='Power Spectrum (1 week to 1 year)', color='purple')

# Highlight student ID
plt.text(
    filtered_frequencies.mean(), max(filtered_power_spectrum) * 0.81,  # Adjust text position
    f'Student ID: 23088736\nX (Avg Summer Price): {X:.2f}\nY (Avg Autumn Price): {Y:.2f}',
    fontsize=12, color='black', bbox=dict(facecolor='white', edgecolor='black', boxstyle='round,pad=0.5')
)

# Titles and labels
plt.title('Power Spectrum of Daily Passenger Variation (1 Week to 1 Year)', fontsize=14, pad=20)
plt.xlabel('Frequency (cycles per day)', fontsize=12)
plt.ylabel('Power', fontsize=12)

# Adding legend and grid
plt.legend(fontsize=10)
plt.grid(alpha=0.4)

# Save the plot
plt.savefig('figure2_power_spectrum_filtered.png', dpi=300)
plt.show()